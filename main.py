import os
import asyncio
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import (
    ChatPermissions,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ChatMemberUpdated,
)
from aiogram.filters import Command, ChatMemberUpdatedFilter, IS_MEMBER, JOIN_TRANSITION
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
import logging

# --- HTTP –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render ---
class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == "/health":
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"OK")
        else:
            self.send_response(404)
            self.end_headers()

def run_health_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("0.0.0.0", port), HealthCheckHandler)
    server.serve_forever()

threading.Thread(target=run_health_server, daemon=True).start()
# --- –∫–æ–Ω–µ—Ü –∑–∞–≥–ª—É—à–∫–∏ ---

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
RULES_MESSAGE_LINK = os.getenv("RULES_MESSAGE_LINK", "")  # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()

# –ü—Ä–∞–≤–∞: –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –≤—Å—ë, –∫—Ä–æ–º–µ —á—Ç–µ–Ω–∏—è
RESTRICTED_PERMISSIONS = ChatPermissions(
    can_send_messages=False,
    can_send_media_messages=False,
    can_send_polls=False,
    can_send_other_messages=False,
    can_add_web_page_previews=False,
    can_change_info=False,
    can_invite_users=False,
    can_pin_messages=False,
)

# –ü—Ä–∞–≤–∞: –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø (–ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
FULL_PERMISSIONS = ChatPermissions(
    can_send_messages=True,
    can_send_media_messages=True,
    can_send_polls=True,
    can_send_other_messages=True,
    can_add_web_page_previews=True,
    can_change_info=False,
    can_invite_users=True,
    can_pin_messages=False,
)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
@router.chat_member(ChatMemberUpdatedFilter(JOIN_TRANSITION))
async def on_user_join(event: ChatMemberUpdated):
    user = event.new_chat_member.user
    chat = event.chat

    # –ï—Å–ª–∏ —ç—Ç–æ –±–æ—Ç ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if user.is_bot:
        return

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.restrict_chat_member(chat.id, user.id, RESTRICTED_PERMISSIONS)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞
    rules_text = f'<a href="{RULES_MESSAGE_LINK}">–ü—Ä–∞–≤–∏–ª–∞–º–∏</a>' if RULES_MESSAGE_LINK else "–ü—Ä–∞–≤–∏–ª–∞–º–∏"

    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª(–∞) –∏ —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)", callback_data=f"accept_{user.id}")]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_msg = await bot.send_message(
        chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üèïÔ∏è\n\n"
        f"–í—Å—Ç—É–ø–∞—è –≤ –∫–ª—É–± –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ Sputnik Caravan, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å {rules_text} –≥—Ä—É–ø–ø—ã.\n"
        f"–ï—Å–ª–∏ —Ç—ã –≤—Å—ë –ø—Ä–æ—á–∏—Ç–∞–ª(–∞), —Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —ç—Ç–æ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=keyboard,
        disable_web_page_preview=True,
    )

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ welcome_msg.message_id, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∂–µ

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
@router.callback_query(lambda c: c.data.startswith("accept_"))
async def on_accept(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    chat_id = callback.message.chat.id
    current_user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
    if current_user_id != user_id:
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞ –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.", show_alert=True)
        return

    # –î–∞—ë–º –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞
    await bot.restrict_chat_member(chat_id, user_id, FULL_PERMISSIONS)

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=callback.message.message_id,
        text=f"–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}! üèïÔ∏è\n\n"
             f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –ü—Ä–∞–≤–∏–ª–∞–º–∏! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ Sputnik Caravan!",
    )

    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ë–æ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω.")

dp.include_router(router)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
